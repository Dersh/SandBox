#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClassGenerator
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FSNext")]
	public partial class DBSourceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDictionaryHeader(DictionaryHeader instance);
    partial void UpdateDictionaryHeader(DictionaryHeader instance);
    partial void DeleteDictionaryHeader(DictionaryHeader instance);
    partial void InsertDictionary(Dictionary instance);
    partial void UpdateDictionary(Dictionary instance);
    partial void DeleteDictionary(Dictionary instance);
    #endregion
		
		public DBSourceDataContext() : 
				base(global::ClassGenerator.Properties.Settings.Default.FSNextConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBSourceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBSourceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBSourceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBSourceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DictionaryHeader> DictionaryHeaders
		{
			get
			{
				return this.GetTable<DictionaryHeader>();
			}
		}
		
		public System.Data.Linq.Table<Dictionary> Dictionaries
		{
			get
			{
				return this.GetTable<Dictionary>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DictionaryHeader")]
	public partial class DictionaryHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Number;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Dictionary> _Dictionaries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DictionaryHeader()
		{
			this._Dictionaries = new EntitySet<Dictionary>(new Action<Dictionary>(this.attach_Dictionaries), new Action<Dictionary>(this.detach_Dictionaries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DictionaryHeader_Dictionary", Storage="_Dictionaries", ThisKey="Number", OtherKey="DictionaryNumber")]
		public EntitySet<Dictionary> Dictionaries
		{
			get
			{
				return this._Dictionaries;
			}
			set
			{
				this._Dictionaries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dictionaries(Dictionary entity)
		{
			this.SendPropertyChanging();
			entity.DictionaryHeader = this;
		}
		
		private void detach_Dictionaries(Dictionary entity)
		{
			this.SendPropertyChanging();
			entity.DictionaryHeader = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dictionary")]
	public partial class Dictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DictionaryNumber;
		
		private string _StringValue;
		
		private EntityRef<DictionaryHeader> _DictionaryHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDictionaryNumberChanging(int value);
    partial void OnDictionaryNumberChanged();
    partial void OnStringValueChanging(string value);
    partial void OnStringValueChanged();
    #endregion
		
		public Dictionary()
		{
			this._DictionaryHeader = default(EntityRef<DictionaryHeader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DictionaryNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DictionaryNumber
		{
			get
			{
				return this._DictionaryNumber;
			}
			set
			{
				if ((this._DictionaryNumber != value))
				{
					if (this._DictionaryHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDictionaryNumberChanging(value);
					this.SendPropertyChanging();
					this._DictionaryNumber = value;
					this.SendPropertyChanged("DictionaryNumber");
					this.OnDictionaryNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StringValue", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string StringValue
		{
			get
			{
				return this._StringValue;
			}
			set
			{
				if ((this._StringValue != value))
				{
					this.OnStringValueChanging(value);
					this.SendPropertyChanging();
					this._StringValue = value;
					this.SendPropertyChanged("StringValue");
					this.OnStringValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DictionaryHeader_Dictionary", Storage="_DictionaryHeader", ThisKey="DictionaryNumber", OtherKey="Number", IsForeignKey=true)]
		public DictionaryHeader DictionaryHeader
		{
			get
			{
				return this._DictionaryHeader.Entity;
			}
			set
			{
				DictionaryHeader previousValue = this._DictionaryHeader.Entity;
				if (((previousValue != value) 
							|| (this._DictionaryHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DictionaryHeader.Entity = null;
						previousValue.Dictionaries.Remove(this);
					}
					this._DictionaryHeader.Entity = value;
					if ((value != null))
					{
						value.Dictionaries.Add(this);
						this._DictionaryNumber = value.Number;
					}
					else
					{
						this._DictionaryNumber = default(int);
					}
					this.SendPropertyChanged("DictionaryHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
